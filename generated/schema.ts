// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pixel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pixel entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pixel entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pixel", id.toString(), this);
  }

  static load(id: string): Pixel | null {
    return store.get("Pixel", id) as Pixel | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get palette(): Bytes | null {
    let value = this.get("palette");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set palette(value: Bytes | null) {
    if (value === null) {
      this.unset("palette");
    } else {
      this.set("palette", Value.fromBytes(value as Bytes));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(value as Bytes));
    }
  }
}

export class transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("transfer", id.toString(), this);
  }

  static load(id: string): transfer | null {
    return store.get("transfer", id) as transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get newowner(): string | null {
    let value = this.get("newowner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newowner(value: string | null) {
    if (value === null) {
      this.unset("newowner");
    } else {
      this.set("newowner", Value.fromString(value as string));
    }
  }

  get pixel(): string | null {
    let value = this.get("pixel");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pixel(value: string | null) {
    if (value === null) {
      this.unset("pixel");
    } else {
      this.set("pixel", Value.fromString(value as string));
    }
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Owner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Owner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Owner", id.toString(), this);
  }

  static load(id: string): Owner | null {
    return store.get("Owner", id) as Owner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pixels(): Array<string> | null {
    let value = this.get("pixels");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pixels(value: Array<string> | null) {
    if (value === null) {
      this.unset("pixels");
    } else {
      this.set("pixels", Value.fromStringArray(value as Array<string>));
    }
  }

  get transfers(): Array<string> | null {
    let value = this.get("transfers");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transfers(value: Array<string> | null) {
    if (value === null) {
      this.unset("transfers");
    } else {
      this.set("transfers", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Total extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Total entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Total entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Total", id.toString(), this);
  }

  static load(id: string): Total | null {
    return store.get("Total", id) as Total | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalowners(): BigInt {
    let value = this.get("totalowners");
    return value.toBigInt();
  }

  set totalowners(value: BigInt) {
    this.set("totalowners", Value.fromBigInt(value));
  }

  get totalpixels(): BigInt {
    let value = this.get("totalpixels");
    return value.toBigInt();
  }

  set totalpixels(value: BigInt) {
    this.set("totalpixels", Value.fromBigInt(value));
  }
}
